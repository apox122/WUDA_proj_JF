name: CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  PYTHON_VERSION: '3.10'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests
    env:
      POSTGRES_DB: "testdb"
      POSTGRES_USER: "testuser"
      POSTGRES_PASSWORD: "testpass"
      POSTGRES_HOST: "localhost"
      PORT: "5432"
      JWT_KEY: "testsecret"
      APP_PORT: "5001"
      APP_HOST: "127.0.0.1"
    
    defaults:
      run:
        working-directory: ./back-end
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_test.txt
    
    - name: Run backend tests with pytest
      run: |
        python -m pytest test_app.py -v --tb=short

  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    env:
      SECRET_KEY: "testsecret"
      BACKEND_HOSTNAME: "localhost"
      BACKEND_PORT: "5001"
      APP_PORT: "8001"
      APP_HOST: "127.0.0.1"
    
    defaults:
      run:
        working-directory: ./front-end
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_test.txt
    
    - name: Run frontend tests with pytest
      run: |
        python -m pytest test_app.py -v --tb=short

  pylint:
    runs-on: ubuntu-latest
    name: Pylint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
    
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
        - language: python
          build-mode: none
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
  build-and-push-images:
      name: Build and Push Docker Images
      needs: [backend-tests, frontend-tests, codeql]
      runs-on: ubuntu-latest
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      permissions:
        contents: read
        packages: write

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Set repo name to lowercase
          run: echo "REPO_NAME_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

        - name: Log in to GitHub Container Registry
          uses: docker/login-action@v2
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Build and push backend image
          uses: docker/build-push-action@v4
          with:
            context: ./back-end
            push: true
            tags: ghcr.io/${{ env.REPO_NAME_LOWER }}/backend:latest

        - name: Build and push frontend image
          uses: docker/build-push-action@v4
          with:
            context: ./front-end
            push: true
            tags: ghcr.io/${{ env.REPO_NAME_LOWER }}/frontend:latest